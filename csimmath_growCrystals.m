function crystals = csimmath_growCrystals( simParams, crystals )
%%% Written by Jonathan K. Meyers (ORCID 0000-0002-6698-3420)
%%% Takes a summary of the growth conditions and a struct of crystals
%%% Grows the crystals and then outputs the updated struct


for cc = 1:size(crystals,2) %iterate through crystals

    %note: we no longer check for whether the crystal is active or not.
    %we grow all of them in order to calculate the grain shadow (v2)

    %size
    crystals(cc).L = ...
        crystals(cc).L + simParams.GR * simParams.timeMultiplier;

    %calculate the slopes based on the angle provided
    crystals(cc).m1 = tand(crystals(cc).rot);
    %perpendicular line has slope of negative reciprocal of the first
    crystals(cc).m2 = -1/crystals(cc).m1; 

    
    %find intercepts of all lines using some geometry and trigonometry
    crystals(cc).b11 = crystals(cc).Cy - crystals(cc).m1 * ...
        crystals(cc).Cx - crystals(cc).L/2 * ( ...
        crystals(cc).m1 * sind(crystals(cc).rot) + cosd(crystals(cc).rot)...
        );
    crystals(cc).b12 = crystals(cc).Cy - crystals(cc).m1 * ...
        crystals(cc).Cx + crystals(cc).L/2 * ( ...
        crystals(cc).m1 * sind(crystals(cc).rot) + cosd(crystals(cc).rot)...
        );
    crystals(cc).b21 = crystals(cc).Cy - crystals(cc).m2 * ...
        crystals(cc).Cx - crystals(cc).L/2 * ( ...
        crystals(cc).m2 * cosd(crystals(cc).rot) - sind(crystals(cc).rot)...
        );
    crystals(cc).b22 = crystals(cc).Cy - crystals(cc).m2 * ...
        crystals(cc).Cx + crystals(cc).L/2 * ( ...
        crystals(cc).m2 * cosd(crystals(cc).rot) - sind(crystals(cc).rot)...
        );

    
    %find the corners of the square and assign the X limits of each edge
    slopeDif = crystals(cc).m1 - crystals(cc).m2;
    crystals(cc).x11 = sort(...
        [(crystals(cc).b21 - crystals(cc).b11),...
        (crystals(cc).b22 - crystals(cc).b11)] ./ slopeDif...
        );
    crystals(cc).x12 = sort(...
        [(crystals(cc).b21 - crystals(cc).b12),...
        (crystals(cc).b22 - crystals(cc).b12)] ./ slopeDif...
        );
    crystals(cc).x21 = sort(...
        [(crystals(cc).b21 - crystals(cc).b11),...
        (crystals(cc).b21 - crystals(cc).b12)] ./ slopeDif...
        );
    crystals(cc).x22 = sort(...
        [(crystals(cc).b22 - crystals(cc).b11),...
        (crystals(cc).b22 - crystals(cc).b12)] ./ slopeDif...
        );


    %Record the coordinates
    crystals(cc).xcoords = [...
        (crystals(cc).b21 - crystals(cc).b11),...
        (crystals(cc).b22 - crystals(cc).b11),...
        (crystals(cc).b22 - crystals(cc).b12),...
        (crystals(cc).b21 - crystals(cc).b12)...
        ] ./ slopeDif;
    crystals(cc).ycoords = crystals(cc).m1 .* crystals(cc).xcoords + [...
        crystals(cc).b11,...
        crystals(cc).b11,...
        crystals(cc).b12,...
        crystals(cc).b12...
        ];

    
    %don't touch the active flag or final state fields 

    
end




end

